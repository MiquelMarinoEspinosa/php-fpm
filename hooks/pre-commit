#!/usr/bin/env php
<?php

require __DIR__ . '/../vendor/autoload.php';

use Symfony\Component\Console\Application;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Process\Process;

class CodeQualityTool extends Application
{
    private $output;
    private $input;
    private $files;
    private $rootPath;

    const PHP_FILES_IN_SRC = '/^(src|tests)\/(.*)(\.php)$/';

    public function __construct()
    {
        parent::__construct('Code Quality Tool', '1.1.0');
        $this->rootPath = __DIR__;
    }

    public function doRun(InputInterface $input, OutputInterface $output)
    {
        $this->input = $input;
        $this->output = $output;

        $this->extractCommitedFiles();
        if ($this->isProcessingAnyPhpFile()) {
            $this->checkComposerJsonAndLockSync();
            $this->checkPhpSyntaxWithLint();
            $this->checkCodeStyleWithCsFixer();
            $this->checkCodeStyleWithCodeSniffer();
            $this->checkPhpMessDetection();
            $this->checkUnitTestsArePassing();
        }
    }

    private function extractCommitedFiles()
    {
        $this->output->writeln('<fg=white;options=bold;bg=red>Code Quality Tool</fg=white;options=bold;bg=red>');
        $this->output->writeln('<info>Fetching files</info>');

        $output = [];
        $rc = 0;

        exec('git rev-parse --verify HEAD 2> /dev/null', $output, $rc);
        exec("git diff-index --cached --name-status HEAD | egrep '^(A|M)' | awk '{print $2;}'", $output);

        $this->files = $output;
    }

    private function isProcessingAnyPhpFile()
    {
        return $this->isAnyFileMatching(function ($aFile) {
            return preg_match(self::PHP_FILES_IN_SRC, $aFile);
        });
    }

    private function checkComposerJsonAndLockSync()
    {
        $this->output->writeln('<info>Check composer</info>');

        $composerJsonDetected = false;
        $composerLockDetected = false;

        foreach ($this->files as $file) {
            if ($file === 'composer.json') {
                $composerJsonDetected = true;
            }

            if ($file === 'composer.lock') {
                $composerLockDetected = true;
            }
        }

        if ($composerJsonDetected && !$composerLockDetected) {
            throw new Exception('composer.lock must be commited if composer.json is modified!');
        }
    }

    private function checkPhpSyntaxWithLint()
    {
        $this->checkCodeStyleWith(
            'PHPLint',
            [PHP_BINARY, '-l'],
            '/(\.php)$/'
        );
    }

    private function checkCodeStyleWith($aLintingTool, $someParams, $aFilePattern)
    {
        $this->output->writeln('<info>Checking code style with ' . $aLintingTool . '</info>');

        $succeed = true;

        foreach ($this->files as $file) {
            $params = $someParams;
            if (!preg_match($aFilePattern, $file)) {
                continue;
            }
            array_push($params, $file);
            $process = new Process($params);
            $process->setWorkingDirectory(__DIR__ . '/../');
            $process->run();

            if (!$process->isSuccessful()) {
                $this->output->writeln($file);
                $this->output->writeln(sprintf('<error>%s</error>', trim($process->getOutput())));

                if ($succeed) {
                    $succeed = false;
                }
            }
        }

        if (!$succeed) {
            throw new Exception(sprintf('There are ' . $aLintingTool . ' coding standards violations!'));
        }
    }

    private function checkCodeStyleWithCsFixer()
    {
        $this->output->writeln('<info>Checking code style</info>');

        $succeed = true;
        foreach ($this->files as $file) {
            $srcFile = preg_match(self::PHP_FILES_IN_SRC, $file);

            if (!$srcFile) {
                continue;
            }

            $process = new Process([
                    PHP_BINARY,
                    'vendor/bin/php-cs-fixer',
                    '--dry-run',
                    '--verbose',
                    'fix',
                    $file,
                    '--rules=@PSR2'
                ]);

            $process->setWorkingDirectory(__DIR__ . '/../');
            $process->run();

            if (!$process->isSuccessful()) {
                $this->output->writeln(sprintf('<error>%s</error>', trim($process->getOutput())));

                if ($succeed) {
                    $succeed = false;
                }
            }
        }

        if (!$succeed) {
            throw new Exception(sprintf('There are coding standards violations!'));
        }
    }

    private function checkCodeStyleWithCodeSniffer()
    {
        $this->checkCodeStyleWith(
            'PHPCS',
            [PHP_BINARY, 'vendor/bin/phpcs', '--standard=PSR2'],
            self::PHP_FILES_IN_SRC
        );
    }

    private function checkPhpMessDetection()
    {
        $this->output->writeln('<info>Checking code mess with PHPMD</info>');

        $needle = self::PHP_FILES_IN_SRC;
        $succeed = true;

        foreach ($this->files as $file) {
            if (!preg_match($needle, $file)) {
                continue;
            }

            $process = new Process([
                PHP_BINARY,
                $this->rootPath . '/../vendor/bin/phpmd',
                $file,
                'text',
                $this->rootPath . '/pmdRules.xml',
                '--minimumpriority',
                1
            ]);
            $process->setWorkingDirectory($this->rootPath . "/..");
            $process->run();

            if (!$process->isSuccessful()) {
                $this->output->writeln($file);
                $this->output->writeln(sprintf('<error>%s</error>', trim($process->getErrorOutput())));
                $this->output->writeln(sprintf('<info>%s</info>', trim($process->getOutput())));
                if ($succeed) {
                    $succeed = false;
                }
            }
        }

        if (!$succeed) {
            throw new Exception(sprintf('There are PHPMD violations!'));
        }
    }

    private function checkUnitTestsArePassing()
    {
        $this->output->writeln('<info>Running unit tests</info>');

        $process = new Process(array('vendor/bin/phpunit', '-c' .__DIR__ .'/../phpunit.xml.dist'));
        $process->setTimeout(3600);
        $process->run(function ($type, $buffer) {
            $this->output->write($buffer);
        });

        if (!$process->isSuccessful()) {
            throw new Exception('Fix the fucking unit tests!');
        }
    }


    private function isAnyFileMatching($aMatcherFunction)
    {
        foreach ($this->files as $file) {
            $isPhpFile = $aMatcherFunction($file);
            if ($isPhpFile) {
                return true;
            }
        }

        return false;
    }
}

$console = new CodeQualityTool();
$console->run();
